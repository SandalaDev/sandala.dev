/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    projects: Project;
    media: Media;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    headline?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    subhead?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'projects';
                  value: number | Project;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | SectionHeadBlock
    | TabsBlock
    | TableBlock
    | TimelineBlock
    | TextCardsBlock
    | ProfileCardsBlock
    | ProcessCardsBlock
    | PricingBlock
    | OrbitalCardsBlock
    | LogoScrollerBlock
    | ContactHubBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  scope?:
    | (
        | 'Brand Strategy'
        | 'Content Strategy'
        | 'Front-End Development'
        | 'Back-End Development'
        | 'Database Design'
        | 'User Training'
        | 'UI & Brand Design'
        | 'System Architecture'
        | 'Hosting & Deployment'
        | 'SEO & Analytics'
        | 'Creative Direction'
        | 'Brand Voice & Tone'
        | 'Naming & Messaging'
        | 'Content Writing'
      )[]
    | null;
  technologies?: ('nextjs' | 'react' | 'payload' | 'github')[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  /**
   * Select the month and year the project was completed.
   */
  projectDate: {
    year: number;
    month: '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' | '09' | '10' | '11' | '12';
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: number | Project;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: number | Project;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'projects' | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'projects';
        value: number | Project;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionHeadBlock".
 */
export interface SectionHeadBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'sectionHead';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock".
 */
export interface TabsBlock {
  /**
   * Configure the main interactive demo section with tabs and slideshows.
   */
  showcase: {
    /**
     * Main heading for the interactive showcase section.
     */
    showcaseHeading: string;
    /**
     * Subheading providing context for the showcase.
     */
    showcaseSubheading: string;
    /**
     * How many seconds each slide should display before auto-advancing.
     */
    slideshowSpeed?: number | null;
    /**
     * Configure tabs with slideshow mockups. Each tab represents a different aspect of your platform.
     */
    demoTabs?:
      | {
          /**
           * Text displayed on the tab button (e.g., "Frontend", "Admin Panel").
           */
          tabName: string;
          /**
           * Optional description text displayed below the slideshow for this tab.
           */
          tabDescription?: string | null;
          /**
           * Images for desktop/large screens. Recommended size: 1200x800px or similar 3:2 ratio.
           */
          desktopImages?:
            | {
                image: number | Media;
                altText: string;
                id?: string | null;
              }[]
            | null;
          /**
           * Images for tablet/medium screens. Recommended size: 768x600px or similar 4:3 ratio.
           */
          tabletImages?:
            | {
                image: number | Media;
                altText: string;
                id?: string | null;
              }[]
            | null;
          /**
           * Images for mobile/small screens. Recommended size: 375x500px or similar portrait ratio.
           */
          mobileImages?:
            | {
                image: number | Media;
                altText: string;
                id?: string | null;
              }[]
            | null;
          /**
           * Subheading displayed above the benefits list for this tab.
           */
          benefitsSubheading?: string | null;
          /**
           * Select an icon to use as bullet points for all benefits in this tab.
           */
          benefitsIcon?: ('payload' | 'openSource' | 'ownership') | null;
          /**
           * Benefits displayed when this tab is active.
           */
          benefitsList?:
            | {
                title: string;
                description: {
                  root: {
                    type: string;
                    children: {
                      type: any;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'tabs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TableBlock".
 */
export interface TableBlock {
  /**
   * Configure the platform comparison table section.
   */
  comparisonSection: {
    tableHeading: string;
    /**
     * Optional subheading below the main heading.
     */
    tableSubheading?: string | null;
    /**
     * Flexibility comparison across platforms.
     */
    flexibilityFeature?: {
      /**
       * Description for Payload CMS.
       */
      payloadText?: string | null;
      /**
       * Description for WordPress.
       */
      wordpressText?: string | null;
      /**
       * Description for Shopify.
       */
      shopifyText?: string | null;
      /**
       * Description for Squarespace/Wix.
       */
      squarespaceText?: string | null;
    };
    /**
     * Customization comparison across platforms.
     */
    customizationFeature?: {
      /**
       * Description for Payload CMS.
       */
      payloadText?: string | null;
      /**
       * Description for WordPress.
       */
      wordpressText?: string | null;
      /**
       * Description for Shopify.
       */
      shopifyText?: string | null;
      /**
       * Description for Squarespace/Wix.
       */
      squarespaceText?: string | null;
    };
    /**
     * Ownership & Control comparison across platforms.
     */
    ownershipFeature?: {
      /**
       * Description for Payload CMS.
       */
      payloadText?: string | null;
      /**
       * Description for WordPress.
       */
      wordpressText?: string | null;
      /**
       * Description for Shopify.
       */
      shopifyText?: string | null;
      /**
       * Description for Squarespace/Wix.
       */
      squarespaceText?: string | null;
    };
    /**
     * Long-term Scalability comparison across platforms.
     */
    scalabilityFeature?: {
      /**
       * Description for Payload CMS.
       */
      payloadText?: string | null;
      /**
       * Description for WordPress.
       */
      wordpressText?: string | null;
      /**
       * Description for Shopify.
       */
      shopifyText?: string | null;
      /**
       * Description for Squarespace/Wix.
       */
      squarespaceText?: string | null;
    };
    /**
     * Developer Experience comparison across platforms.
     */
    developerExperienceFeature?: {
      /**
       * Description for Payload CMS.
       */
      payloadText?: string | null;
      /**
       * Description for WordPress.
       */
      wordpressText?: string | null;
      /**
       * Description for Shopify.
       */
      shopifyText?: string | null;
      /**
       * Description for Squarespace/Wix.
       */
      squarespaceText?: string | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'table';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimelineBlock".
 */
export interface TimelineBlock {
  /**
   * Main title for the timeline (e.g., "Career Journey", "Project History")
   */
  title?: string | null;
  /**
   * Optional subtitle or description text
   */
  subtitle?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Choose the visual layout for the timeline
   */
  layout?: ('default' | 'grid') | null;
  /**
   * Group timeline items into epochs/periods
   */
  epochs?:
    | {
        /**
         * Name for this time period (e.g., "Foundation", "Growth", "Mastery")
         */
        epochName: string;
        items?:
          | {
              /**
               * Date range or period (e.g., "2020 — 2023", "Jan 2024")
               */
              period: string;
              /**
               * Check if this item represents multiple concurrent roles/activities
               */
              isDual?: boolean | null;
              /**
               * Job title or role name
               */
              role?: string | null;
              /**
               * Company, organization, or project name
               */
              company?: string | null;
              /**
               * Detailed description of accomplishments and responsibilities
               */
              description?: {
                root: {
                  type: string;
                  children: {
                    type: any;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              /**
               * Skills, technologies, or relevant tags
               */
              tags?:
                | {
                    tag: string;
                    id?: string | null;
                  }[]
                | null;
              /**
               * Multiple roles or activities during this period
               */
              roles?:
                | {
                    role: string;
                    company: string;
                    description?: {
                      root: {
                        type: string;
                        children: {
                          type: any;
                          version: number;
                          [k: string]: unknown;
                        }[];
                        direction: ('ltr' | 'rtl') | null;
                        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                        indent: number;
                        version: number;
                      };
                      [k: string]: unknown;
                    } | null;
                    /**
                     * Skills, technologies, or relevant tags
                     */
                    tags?:
                      | {
                          tag: string;
                          id?: string | null;
                        }[]
                      | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Two interactive cards below the timeline navigation
   */
  profileCards: {
    biographyCard: {
      title: string;
      /**
       * Short preview text shown on the card
       */
      teaserText?: string | null;
      /**
       * Italicized text at the bottom of the card
       */
      emphasisText?: string | null;
      /**
       * Full biography text shown in the modal
       */
      modalContent?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
    interestsCard: {
      title: string;
      /**
       * Short preview text shown on the card
       */
      teaserText?: string | null;
      /**
       * Italicized text at the bottom of the card
       */
      emphasisText?: string | null;
      /**
       * Image to display on the interests card
       */
      cardImage?: (number | null) | Media;
      /**
       * Categories of interests to display in the modal
       */
      interests?:
        | {
            /**
             * e.g., Sports, Movies, Music, Reading, etc.
             */
            category: string;
            /**
             * Upload up to 5 images that represent this interest category
             */
            images?:
              | {
                  image: number | Media;
                  /**
                   * Brief description of the image for accessibility
                   */
                  alt?: string | null;
                  id?: string | null;
                }[]
              | null;
            /**
             * Detailed description of your interest in this category
             */
            description?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
          }[]
        | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'timeline';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextCardsBlock".
 */
export interface TextCardsBlock {
  /**
   * Add reusable text cards. Optional fields are not rendered when empty.
   */
  cards?:
    | {
        /**
         * Short headline for the card (e.g., “Brand Foundation”)
         */
        title?: string | null;
        /**
         * Main body text. Supports bold/italic and headings.
         */
        body?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Choose how list items should render (separate from rich text).
         */
        listStyle?: ('none' | 'bullet' | 'check') | null;
        /**
         * Optional list items rendered below the body (uses chosen list style).
         */
        bodyList?:
          | {
              /**
               * One short line per item
               */
              text: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Rendered in italic styling by the component.
         */
        footnote?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProfileCardsBlock".
 */
export interface ProfileCardsBlock {
  cards: {
    icon: string;
    title: string;
    previewText: string;
    /**
     * Italicized helper text at the bottom of the card.
     */
    hintText: string;
    modalContent: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    id?: string | null;
  }[];
  personalSection: {
    avatarEmoji: string;
    bioText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctas?:
      | {
          label: string;
          url?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'profileCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProcessCardsBlock".
 */
export interface ProcessCardsBlock {
  /**
   * Short tagline above the main heading
   */
  headline: string;
  /**
   * Main heading for the process section
   */
  heading: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add 3-5 process steps
   */
  steps?:
    | {
        /**
         * Step number (1-5)
         */
        stepNumber: number;
        /**
         * Short, descriptive title
         */
        title: string;
        /**
         * Detailed explanation of the step
         */
        description: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'processCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PricingBlock".
 */
export interface PricingBlock {
  /**
   * Main heading for the pricing section (e.g., "Choose Your Plan")
   */
  title?: string | null;
  /**
   * Optional subtitle or description below the main title
   */
  subtitle?: string | null;
  /**
   * Pricing cards - typically 2-4 cards work best
   */
  cards?:
    | {
        /**
         * Optional badge text (e.g., "Best Value", "Popular", "Most Popular")
         */
        badge?: string | null;
        /**
         * Plan name (e.g., "Basic", "Pro", "Enterprise")
         */
        title: string;
        /**
         * Short description of the plan
         */
        subtitle?: string | null;
        /**
         * Currency symbol
         */
        currency?: string | null;
        /**
         * Main price (e.g., "99", "1,200")
         */
        price: string;
        /**
         * Optional original price for strikethrough effect
         */
        originalPrice?: string | null;
        /**
         * Optional note below price (e.g., "per month", "one-time")
         */
        priceNote?: string | null;
        /**
         * List of features included in this plan
         */
        features?:
          | {
              /**
               * Feature name/title (bold text)
               */
              title: string;
              /**
               * Optional feature description (smaller text below title)
               */
              description?: string | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional note or additional info for this plan
         */
        note?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Make this card stand out (adds border and scale effect)
         */
        featured?: boolean | null;
        /**
         * Button for this pricing card
         */
        cta: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: number | Project;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricing';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OrbitalCardsBlock".
 */
export interface OrbitalCardsBlock {
  /**
   * Add 3-8 capability cards
   */
  cards?:
    | {
        /**
         * Choose an icon for this card
         */
        icon:
          | 'rocket'
          | 'code'
          | 'cogs'
          | 'lightbulb'
          | 'palette'
          | 'penTool'
          | 'network'
          | 'layers'
          | 'plug'
          | 'chartLine'
          | 'handshake';
        /**
         * Keep under 5 words
         */
        title: string;
        /**
         * 1-2 short sentences
         */
        description: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'orbitalCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoScrollerBlock".
 */
export interface LogoScrollerBlock {
  /**
   * Optional title displayed above the logo scroller (e.g., "Technologies & Expertise")
   */
  title?: string | null;
  /**
   * Add logos/items to scroll. Minimum 1 required for animation.
   */
  logos?:
    | {
        logoType?: ('custom' | 'fontawesome') | null;
        customIcon?: ('payload' | 'react' | 'nextjs') | null;
        /**
         * e.g., "fab fa-react", "fas fa-database"
         */
        faIconClass?: string | null;
        /**
         * Display name for this technology/company (always shown below icon/image)
         */
        name: string;
        /**
         * Color theme for the icon.
         */
        iconColor?:
          | ('primary' | 'telecom' | 'design' | 'frontend' | 'backend' | 'database' | 'tools' | 'accent')
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * How fast the logos scroll across the screen.
   */
  animationSpeed?: ('slow' | 'normal' | 'fast') | null;
  /**
   * Pause animation when user hovers over the scroller.
   */
  pauseOnHover?: boolean | null;
  /**
   * Background styling for the scroller container.
   */
  backgroundColor?: ('glass' | 'transparent' | 'theme') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'logoScroller';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactHubBlock".
 */
export interface ContactHubBlock {
  title: string;
  subtitle?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  contactCards?:
    | {
        /**
         * Unique identifier for this card (used for modal targeting)
         */
        id: string;
        topIcon?: ('nextjs' | 'react' | 'payload' | 'github') | null;
        bottomIcon?: ('message-circle' | 'video' | 'zap') | null;
        subtitle?: string | null;
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Optional note or badge text (e.g., "Quick response", "Paid session")
         */
        note?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Select the form to display in the modal for this contact card
         */
        form: number | Form;
        /**
         * Links to suggest other contact options within the modal
         */
        crossLinks?:
          | {
              /**
               * Text before the link (e.g., "Sounds like you need a demo?")
               */
              text: string;
              /**
               * The clickable link text (e.g., "Click here for demo")
               */
              linkText: string;
              /**
               * The ID of the card to open when this link is clicked
               */
              targetCardId: string;
              id?: string | null;
            }[]
          | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactHub';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'projects';
          value: number | Project;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'projects';
    value: number | Project;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'projects';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        headline?: T;
        subhead?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        sectionHead?: T | SectionHeadBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        table?: T | TableBlockSelect<T>;
        timeline?: T | TimelineBlockSelect<T>;
        textCards?: T | TextCardsBlockSelect<T>;
        profileCards?: T | ProfileCardsBlockSelect<T>;
        processCards?: T | ProcessCardsBlockSelect<T>;
        pricing?: T | PricingBlockSelect<T>;
        orbitalCards?: T | OrbitalCardsBlockSelect<T>;
        logoScroller?: T | LogoScrollerBlockSelect<T>;
        contactHub?: T | ContactHubBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionHeadBlock_select".
 */
export interface SectionHeadBlockSelect<T extends boolean = true> {
  richText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock_select".
 */
export interface TabsBlockSelect<T extends boolean = true> {
  showcase?:
    | T
    | {
        showcaseHeading?: T;
        showcaseSubheading?: T;
        slideshowSpeed?: T;
        demoTabs?:
          | T
          | {
              tabName?: T;
              tabDescription?: T;
              desktopImages?:
                | T
                | {
                    image?: T;
                    altText?: T;
                    id?: T;
                  };
              tabletImages?:
                | T
                | {
                    image?: T;
                    altText?: T;
                    id?: T;
                  };
              mobileImages?:
                | T
                | {
                    image?: T;
                    altText?: T;
                    id?: T;
                  };
              benefitsSubheading?: T;
              benefitsIcon?: T;
              benefitsList?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TableBlock_select".
 */
export interface TableBlockSelect<T extends boolean = true> {
  comparisonSection?:
    | T
    | {
        tableHeading?: T;
        tableSubheading?: T;
        flexibilityFeature?:
          | T
          | {
              payloadText?: T;
              wordpressText?: T;
              shopifyText?: T;
              squarespaceText?: T;
            };
        customizationFeature?:
          | T
          | {
              payloadText?: T;
              wordpressText?: T;
              shopifyText?: T;
              squarespaceText?: T;
            };
        ownershipFeature?:
          | T
          | {
              payloadText?: T;
              wordpressText?: T;
              shopifyText?: T;
              squarespaceText?: T;
            };
        scalabilityFeature?:
          | T
          | {
              payloadText?: T;
              wordpressText?: T;
              shopifyText?: T;
              squarespaceText?: T;
            };
        developerExperienceFeature?:
          | T
          | {
              payloadText?: T;
              wordpressText?: T;
              shopifyText?: T;
              squarespaceText?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimelineBlock_select".
 */
export interface TimelineBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  layout?: T;
  epochs?:
    | T
    | {
        epochName?: T;
        items?:
          | T
          | {
              period?: T;
              isDual?: T;
              role?: T;
              company?: T;
              description?: T;
              tags?:
                | T
                | {
                    tag?: T;
                    id?: T;
                  };
              roles?:
                | T
                | {
                    role?: T;
                    company?: T;
                    description?: T;
                    tags?:
                      | T
                      | {
                          tag?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  profileCards?:
    | T
    | {
        biographyCard?:
          | T
          | {
              title?: T;
              teaserText?: T;
              emphasisText?: T;
              modalContent?: T;
            };
        interestsCard?:
          | T
          | {
              title?: T;
              teaserText?: T;
              emphasisText?: T;
              cardImage?: T;
              interests?:
                | T
                | {
                    category?: T;
                    images?:
                      | T
                      | {
                          image?: T;
                          alt?: T;
                          id?: T;
                        };
                    description?: T;
                    id?: T;
                  };
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextCardsBlock_select".
 */
export interface TextCardsBlockSelect<T extends boolean = true> {
  cards?:
    | T
    | {
        title?: T;
        body?: T;
        listStyle?: T;
        bodyList?:
          | T
          | {
              text?: T;
              id?: T;
            };
        footnote?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProfileCardsBlock_select".
 */
export interface ProfileCardsBlockSelect<T extends boolean = true> {
  cards?:
    | T
    | {
        icon?: T;
        title?: T;
        previewText?: T;
        hintText?: T;
        modalContent?: T;
        id?: T;
      };
  personalSection?:
    | T
    | {
        avatarEmoji?: T;
        bioText?: T;
        ctas?:
          | T
          | {
              label?: T;
              url?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProcessCardsBlock_select".
 */
export interface ProcessCardsBlockSelect<T extends boolean = true> {
  headline?: T;
  heading?: T;
  steps?:
    | T
    | {
        stepNumber?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PricingBlock_select".
 */
export interface PricingBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  cards?:
    | T
    | {
        badge?: T;
        title?: T;
        subtitle?: T;
        currency?: T;
        price?: T;
        originalPrice?: T;
        priceNote?: T;
        features?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
        note?: T;
        featured?: T;
        cta?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OrbitalCardsBlock_select".
 */
export interface OrbitalCardsBlockSelect<T extends boolean = true> {
  cards?:
    | T
    | {
        icon?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoScrollerBlock_select".
 */
export interface LogoScrollerBlockSelect<T extends boolean = true> {
  title?: T;
  logos?:
    | T
    | {
        logoType?: T;
        customIcon?: T;
        faIconClass?: T;
        name?: T;
        iconColor?: T;
        id?: T;
      };
  animationSpeed?: T;
  pauseOnHover?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactHubBlock_select".
 */
export interface ContactHubBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  contactCards?:
    | T
    | {
        id?: T;
        topIcon?: T;
        bottomIcon?: T;
        subtitle?: T;
        title?: T;
        description?: T;
        note?: T;
        form?: T;
        crossLinks?:
          | T
          | {
              text?: T;
              linkText?: T;
              targetCardId?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  scope?: T;
  technologies?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  projectDate?:
    | T
    | {
        year?: T;
        month?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: number | Project;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'projects';
                value: number | Project;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'projects';
          value: number | Project;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}